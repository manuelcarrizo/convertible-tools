#!/usr/bin/python3

import os
import sys
import asyncio
import argparse
import subprocess
import threading
import socket

from pydbus import SystemBus
from gi.repository import GLib, Notify

rotation_locked = False
touchscreen_id = None
touchpad_id = None

orientations = {
    'normal': {
        'xrandr': 'normal',
        'matrix': ['1', '0', '0', '0', '1', '0', '0', '0', '1'],
        'touchpad': 'enable'
    },
    'bottom-up': {
        'xrandr': 'inverted',
        'matrix': ['-1', '0', '1', '0', '-1', '1', '0', '0', '1'],
        'touchpad': 'disable'
    },
    'left-up': {
        'xrandr': 'left',
        'matrix': ['0', '-1', '1', '1', '0', '0', '0', '0', '1'],
        'touchpad': 'disable'
    },
    'right-up': {
        'xrandr': 'right',
        'matrix': ['0', '1', '0', '-1', '0', '1', '0', '0', '1'],
        'touchpad': 'disable'
    }
}

SOCK = "/tmp/autorotate.sock"
SINGLE_MONITOR = True # Don't rotate if an external monitor is connected
DISABLE_TOUCHPAD = True # Disable the touchpad if is required in the orientation

def get_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("command", choices=["enable", "disable", "toggle"], nargs='?')

    return parser

def get_touchscreen_id():
    global touchscreen_id

    if touchscreen_id is None:
        touchscreen_id = subprocess.check_output(
           "xinput --list --long | grep XITouchClass | sort | uniq | tr -dc '0-9'",
            shell=True
        ).decode("utf-8").strip()

    return touchscreen_id

def get_touchpad_id():
    global touchpad_id

    if touchpad_id is None:
        touchpad_id = subprocess.check_output(
            "xinput list | grep -iPo 'touchpad.*id=\K\d+'",
            shell=True
        ).decode("utf-8").strip()
    
    return touchpad_id

def monitor_count():
    return int(subprocess.check_output(
        "xrandr --listmonitors | grep Monitors | tr -dc '0-9'",
        shell=True
    ).decode("utf-8"))

def rotate(orientation):
    params = orientations[orientation]

    subprocess.call(['xrandr', "-o", params['xrandr']])
    subprocess.call(['xinput', "set-prop", get_touchscreen_id(), 
                     "Coordinate Transformation Matrix"] + params['matrix'])
    
    if DISABLE_TOUCHPAD:
        subprocess.call(['xinput', params['touchpad'], get_touchpad_id()])

def handle_accelerometer(*data):
    if rotation_locked or (SINGLE_MONITOR and monitor_count() > 1):
        return

    rotate(data[1]['AccelerometerOrientation'])

def glib_worker():
    loop = GLib.MainLoop()

    bus = SystemBus()
    proxy = bus.get("net.hadess.SensorProxy", "/net/hadess/SensorProxy")

    proxy.ClaimAccelerometer()
    proxy.PropertiesChanged.connect(handle_accelerometer)

    loop.run()

async def handle_request(reader, writer):
    global rotation_locked

    data = await reader.read(100)
    cmd = data.decode().strip()

    if cmd == "enable":
        rotation_locked = False
    elif cmd == "disable":
        rotation_locked = True
    elif cmd == "toggle":
        rotation_locked ^= True
    
    if rotation_locked:
        status = "disabled"
        icon = "preferences-desktop-user-password"
    else:
        status = "enabled"
        icon = "preferences-desktop-screensaver"

    Notify.Notification.new("Automatic rotation is %s" % status, "", icon).show()

    writer.close()

def lock_autorotate_worker(loop):
    global SOCK

    asyncio.set_event_loop(loop)

    loop = asyncio.get_event_loop()
    coro = asyncio.start_unix_server(handle_request, path=SOCK, loop=loop)
    server = loop.run_until_complete(coro)

    try:
        loop.run_forever()
    except KeyboardInterrupt:
        pass

    # Close the server
    server.close()
    loop.run_until_complete(server.wait_closed())
    loop.close()

def start_server():
    Notify.init("Autorotate")

    sensor = threading.Thread(target=glib_worker, daemon=True)

    loop = asyncio.get_event_loop()
    lock = threading.Thread(target=lock_autorotate_worker, args=(loop,), daemon=True)

    sensor.start()
    lock.start()

    try:
        sensor.join()
        lock.join()
    except:
        pass

def send_command(cmd):
    s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    s.connect(SOCK)
    s.send(cmd.encode())
    s.close()


if __name__ == "__main__":
    parser = get_parser()
    args = parser.parse_args()

    if args.command:
        send_command(args.command)
    else:
        start_server()

